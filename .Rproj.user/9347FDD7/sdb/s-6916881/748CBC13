{
    "contents" : "###### ISSR Intro To R Workshop, 10/20/14, contact mdenny@polsci.umass.edu #####\n\n\n###### Preliminaries -- Setting Up R To Do Work ######\n\n# Clear your workspace -- This gets rid of all of the information that was there when you started to you have a clean slate.\nrm(list = ls())\n\n# Set your working directory -- This is where R goes to look for files and save stuff by default. You will need to do this for each computer you run your script file on. In RStudio, you can go to Session -> Set Working Directory -> Choose Directory and select a folder from a drop down menu. For me, this looks like:\n#setwd(\"~/Dropbox/RA_and_Consulting_Work/ISSR_Consulting_Work/Intro_To_R\")\n\n\n\n###################################################\n###### Basic Data Structures and Operations  ######\n###################################################\n\n\n###### Comparison Operators ######\n5 < 6\n5 > 6\n5 == 5\n5 != 6\n5 <= 5\n\n#R will do its best to make two quantities comparable\n5345 == \"5345\" \n\n#However if we assign a value to a variable, then it will compare the value in the varaible \n\n#FALSE\ni = 5\ni == \"i\"\n\n#TRUE\ni = \"i\"\ni == \"i\"\n\n\n##### Creating Data in R #####\n\n# assign a value to a variable (no spaces or symbols other than . or _ in your name)\nmy_value <- 24\n\n# create a vector using the concatenation operator\nmy_vector <- c(1:10)\n\n#take a look at what is stored in your variable\nprint(my_vector)\n\n# get the length of the vector\nlength(my_vector)\n\n# create a matrix (can only hold one kind of data -- usually numbers)\nmy_matrix <- matrix(c(1:25),nrow = 5,ncol=5 )\n\n#Lets make some fake data!\nstudent_id <- c(1:10)\ngrades <- c(\"A\",\"B\",\"C\",\"A\",\"C\",\"F\",\"D\",\"B\",\"B\",\"A\")\n#the rep() function repeats some variable x for a specified number of times.\nclass <- c(rep(0,times = 5),rep(1,times = 5))\nfree_lunch <- rep(TRUE,times = 10)\n\n\n#put them together to make a data frame, use the stringsAsFactors = FALSE argument so that we do not turn our letter grades into factor varaibles (a kind of categorical varialbe that R likes)\ndata <-data.frame(student_id,grades,class,free_lunch, stringsAsFactors = FALSE)\n\n#set column names\ncolnames(data) <- c(\"Student ID\", \"Grades\",\"Class\",\"Free Lunch?\")\n\n#lets search through our data and take subsets \n\n#the which() function will let us identify observations that meet a certain criteria. This example also introduces the dollar sign operator which will let us access a variable in a data frame by name:\nwhich(data$Grades == \"A\")\n\n#now we can create a new dataset that only includes A or B students by saving the indexes of the A and B students and then using them to extract a subset of the total students:\nA_students <- which(data$Grades == \"A\")\nB_students <- which(data$Grades == \"B\")\nstudents_for_reduced_dataset <- c(A_students,B_students)\n\n#use the vector to index only the rows we want and extract them, saving them to a new object. Note that we index by [row,column] and if we leav one of these fields blank then we take the entire row (or column).\nreduced_data <- data[students_for_reduced_dataset,]\n\n\n# Create an empty list\nmy_list <- vector(\"list\", length = 10)\n# Create a list from objects\nmy_list <- list(10, \"dog\",c(1:10))\n# Add a sublist to a list\nmy_list <- append(my_list, list(list(27,14,\"cat\")))\n\nprint(my_list)\n\n\n##################################\n######      Data I/O        ######\n##################################\n\n#in this section we are going to write our school children data to a csv file and then read the data back in to another R object. We are also going to learn how to save R objects. \n\n#make sure you do not write row names, this can really mess things up!\nwrite.csv(x=data, file = \"school_data.csv\", row.names = FALSE)\n\n#now we are going to read the data back in from a .csv. You should make sure that you specify the correct separator (the write.csv function defaults to using comma separation). I always specify stringsAsFactors = FALSE to preserve any genuine string variables I read in.\nschool_data <- read.csv(file = \"school_data.csv\", stringsAsFactors = FALSE,sep = \",\")\n\n## Excel Data ##\n#we will need to load a package in order to read in excel data. This will extend the usefulness of R os that we can now read in .xlsx files.\n\n#first we need to download the package, we can either do this manually or by using the package manager in base R. You need to make sure you select dependencies = TRUE so that you download the other packages that your package depends on, otherwise it will not work! Here is the manual way:\ninstall.packages(\"xlsx\", dependencies = TRUE)\n\n#now we have to actually load the package so we can use it. We do this using the library() command\nlibrary(xlsx)\n\n#write our school children data to an xlsx file:\nwrite.xlsx(data, file = \"school_data.xlsx\", row.names=FALSE)\n\n#now we can read in our data from the excel file:\nexcel_school_data <- read.xlsx(file = \"school_data.xlsx\", sheetIndex =1, stringsAsFactors = FALSE)\n\n## Stata Data ##\n#we need the foreign package to read in data from Stata:\ninstall.packages(\"foreign\", dependencies = TRUE)\n\n#load the package\nlibrary(foreign)\n\n#write data to a .dta file:\nwrite.dta(data,file = \"school_data.dta\")\n\nstata_school_data <- read.dta(file = \"school_data.dta\")\n\n\n## Rdata files ##\n\n#finally we may want to read and write our data to an Rdata file that can hold everything in our workspace or just a couple of things. This is a very good strategy for saving all of your files after a day of working so you can pick back up where you left off:\n\n#save just a few objects:\nsave(list = c(\"data\", \"reduced_data\"), file = \"Two_objects.Rdata\")\n\n#or save your whole working directory\nsave(list= ls(), file = \"MyData.Rdata\")\n\n#now lets test it out by clearing our whole workspace (note that if we do this we will need to reload any packages we were using manually as they do not get saved to the .Rdata file)\nrm(list= ls())\n\n#now we can load the data back in! It is good practice to set our working directory again first (remeber to change this to the folder location where you downloaded the workshop materials or saved this script file!):\nsetwd(\"~/Dropbox/RA_and_Consulting_Work/ISSR_Consulting_Work/Intro_To_R\")\n\n#load in the two objects\nload(file = \"Two_objects.Rdata\")\n\n#load in everything\nload(file = \"MyData.Rdata\")\n\n\n\n##################################\n###### More Advanced Topics ######\n##################################\n\n# we will go over these if we have time. Otherwise you are free to play around with these examples yourself. They are some of the most powerful constructs in R!\n\n###### For Loops ######\n\n# example of a for() loop\nmy_vector <- c(20:30)\nfor(i in 1:length(my_vector)){\n    my_vector[i] <- sqrt(my_vector[i])\n}\n#display the result\nprint(my_vector)\n\n\n###### If/Else Statements ######\n\n# example of an if statement\nmy_vector <- c(20:30)\nfor(i in 1:length(my_vector)){\n    if(my_vector[i] == 25){\n        print(\"The square root is 5!\")\n    }\n}\n\n\n# you can also add in an else statement to do something else if the condition is not met.\nmy_vector <- c(20:30)\nfor(i in 1:length(my_vector)){\n    if(my_vector[i] == 25){\n        print(\"I am 25!\")\n    }else{\n        print(\"I am not 25!\")\n    }\n}\n\n\n###### Functions ######\n\n#define a function that will take the sum of a particular column of a matrix\nmy_function <- function(col_number,my_matrix ){ \n    #take the column sum of the matrix\n    col_sum <- sum(my_matrix[,col_number])\n    return(col_sum)\n}\n\n\n",
    "created" : 1433179575029.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1671874113",
    "id" : "748CBC13",
    "lastKnownWriteTime" : 1433179825,
    "path" : "~/GitHub/ISSR_DataSci_Workshop/Scripts/Intro.R",
    "project_path" : "Scripts/Intro.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}